" {{{ fundamentals

" Use Vim settings, rather then Vi settings (much better!).
" This must be first, because it changes other options as a side effect.
set nocompatible

filetype plugin indent on
set runtimepath&
set runtimepath+=~/projects/dotfiles/vim/runtime,~/projects/dotfiles/vim/runtime/after

" }}}



" {{{ set for edit

" Allow backspacing over everything in insert mode
set backspace=indent,eol,start

" Enable CTRL-A/CTRL-X to work on octal and hex numbers, as well as characters
set nrformats=octal,hex,alpha

set pastetoggle=<F8>

set formatoptions&
set formatoptions+=mM

" }}}



" {{{ set for completion

set history=100

set completeopt=menu,longest,preview

" Use menu to show command-line completion (in 'full' case)
set wildmenu

" http://d.hatena.ne.jp/ns9tks/20080603/1212500562
" Set command-line completion mode:
"   - on first <Tab>, when more than one match, list all matches and complete
"     the longest common  string
"   - on second <Tab>, complete the next full match and show menu
set wildmode=list:longest,full

" Remember things between sessions
"
" '20  - remember marks for 20 previous files
" \"50 - save 50 lines for each register
" :20  - remember 20 items in command-line history
" %    - remember the buffer list (if vim started without a file arg)
" n    - set name of viminfo file
set viminfo='20,\"50,:20,%,n~/.viminfo

" }}}



" {{{ set for display

set background=dark

" http://omake.accense.com/wiki/vimrc
set fileencodings=utf-8,cp932,euc-jp
set ambiwidth=double
set foldmethod=marker

set nonumber
set wrap
set ruler

" Scroll when cursor gets within 3 characters of top/bottom edge
set scrolloff=3

" don't show the difference between tabs and spaces and for trailing blanks
set nolist

" Always show status line, even for one window
set laststatus=2

set cmdheight=2

" Show (partial) commands (or size of selection in Visual mode) in the status line
set showcmd

set showmatch
set matchtime=2

set splitright

" The title of the window will be set to the value of titlestring
set title

set statusline=%F%m%r%h%w\ [%{&fileencoding}\ %{&fileformat}]\ [TYPE=%Y]\ [%l/%L,\ %c]
" set statusline=%<%f\ %m%r%h%w%{'['.(&fenc!=''?&fenc:&enc).']['.&ff.']'}%=%l,%c%V%8P

" }}}



" {{{ set for indent

set tabstop=8
set expandtab
set shiftwidth=2
set shiftround
set smartindent
set smarttab
set autoindent

" }}}



" {{{ set for search

set nohlsearch
set incsearch
set ignorecase
set smartcase
set wrapscan

" }}}



" {{{ set for file manipulation

set autowriteall
set autoread
set nobackup
set noswapfile

" http://vimpi.net/user/dubhead
set autochdir
set backupdir=~/.Trash,.,~/
set hidden

" }}}



" {{{ mappings

let mapleader=" "

" quick vimrc reload
nnoremap <Leader>. :<C-u>edit ~/projects/dotfiles/vim/vimrc<Enter>
nnoremap <Leader>s. :<C-u>source ~/projects/dotfiles/vim/vimrc<Enter>

" edit file
nnoremap <Leader>e :e<Space>

" open current directory
nnoremap <Leader>d :edit .<CR>

" save changes
nnoremap <Leader>s :w<CR>

" exit vim without saving any changes
nnoremap <Leader>q :q!<CR>

" exit vim saving changes
nnoremap <Leader>x :x<CR>

" map ,f to display all lines with keyword under cursor and ask which one to
" jump to
nnoremap ,f [I:let nr = input("Which one: ")<Bar>exe "normal " . nr ."[\t"<CR>

" use <F6> to toggle line numbers
nnoremap <silent> <F6> :set number!<CR>

" open filename under cursor in a new window (use current file's working
" directory)
nnoremap gf :new %:p:h/<cfile><CR>

" map <Alt-p> and <Alt-P> to paste below/above and reformat
nnoremap <Esc>P  P'[v']=
nnoremap <Esc>p  p'[v']=

" visual shifting (does not exit Visual mode)
vnoremap < <gv
vnoremap > >gv

" http://blog.blueblack.net/item_317
"nnoremap J jzz
nnoremap K kzz
noremap <CR> o<ESC>

" http://d.hatena.ne.jp/kozo-ni/20081028#1225205605
nnoremap <F5> :<C-u>execute '!' &l:filetype '%'<Return>

" Use CTRL-L for Escape
" http://twitter.com/emanon001/status/1022597622
vnoremap <silent> <C-l> <Esc>
inoremap <silent> <C-l> <Esc>
cnoremap <silent> <C-l> <C-c>

" http://whileimautomaton.net/2008/06/diary#d01-214900
nnoremap <C-h> :<C-u>help<Space>
nnoremap <C-h><C-h> :<C-u>help<Space><C-r><C-w><Return>

" http://lab.hde.co.jp/2009/02/vimpython.html
"noremap <F5> :!/usr/bin/python %<CR>
noremap <F12> :!/usr/lib/python2.5/pdb.py %<CR>

" http://my.opera.com/jacob7908/blog/index.dml/tag/VIM
" pull full path name into paste buffer for attachment to email etc
nnoremap <F2> :let @p=expand("%:p")<CR>

" http://d.hatena.ne.jp/ns9tks/20081005/1223173570
inoremap { {}<LEFT>
inoremap [ []<LEFT>
inoremap ( ()<LEFT>
inoremap " ""<LEFT>
inoremap ' ''<LEFT>
noremap! <C-b> <Left>
noremap! <C-f> <Right>
noremap! <C-k> <Up>
noremap! <C-j> <Down>
noremap! <C-a> <Home>
noremap! <C-e> <End>
inoremap <silent> <expr> <C-e> (pumvisible() ? "\<C-e>" : "\<End>")
noremap! <C-d> <Del>

" azerty emulation
" http://vim.wikia.com/index.php?title=Invert_the_number_row_keys_for_faster_typing
" map each number to its shift-key character
"inoremap 1 !
"inoremap ! 1
"
"inoremap 2 ""<LEFT>
"inoremap " 2
"
"inoremap 3 #
"inoremap # 3
"
"inoremap 4 $
"inoremap $ 4
"noremap 4 $
"
"inoremap 5 %
"inoremap % 5
"
"inoremap 6 &
"inoremap & 6
"
"inoremap 7 ''<LEFT>
"inoremap ' 7
"
"inoremap 8 ()<LEFT>
"inoremap ( 8
"
"inoremap 9 )
"inoremap ) 9

" quick EX command for my key arrangement
noremap - :
noremap : -

" swap lines down-upward and display lines down-upward
noremap j gj
noremap k gk
noremap gj j
noremap gk k

" quick date insert
inoremap <expr> ,df strftime('%Y-%m-%dT%H:%M:%S')
inoremap <expr> ,dd strftime('%Y-%m-%d')
inoremap <expr> ,dt strftime('%H:%M:%S')

" select last changed text
nnoremap gc `[v`]
vnoremap gc :<C-u>normal gc<Enter>
onoremap gc :<C-u>normal gc<Enter>

" http://vim.g.hatena.ne.jp/ka-nacht/20090624
noremap D d$

" :h scroll-smooth
map <C-U> <C-Y><C-Y><C-Y><C-Y><C-Y><C-Y><C-Y><C-Y><C-Y><C-Y><C-Y><C-Y><C-Y><C-Y><C-Y><C-Y>
map <C-D> <C-E><C-E><C-E><C-E><C-E><C-E><C-E><C-E><C-E><C-E><C-E><C-E><C-E><C-E><C-E><C-E>

" }}}



" {{{ taglist.vim

let Tlist_Show_One_File=1
nnoremap <silent> <Leader>tl :TlistToggle<CR>

" }}}

" {{{ netrw.vim

let g:netrw_browse_split=0

" }}}

" {{{ getscript.vim

let g:GetLatestVimScripts_allowautoinstall=1

" }}}

" {{{ FuzzyFinder

" http://gist.github.com/raw/4656/bb1aca94bbb12c866bdab00531b539ecd80670de
" http://vim.g.hatena.ne.jp/keyword/fuzzyfinder.vim

let g:fuf_modesDisable = []
let g:fuf_abbrevMap = {
    \   '^vr:' : map(filter(split(&runtimepath, ','), 'v:val !~ "after$"'), 'v:val . ''/**/'''),
    \   '^m0:' : [ '/mnt/d/0/', '/mnt/j/0/' ],
    \ }
let g:fuf_mrufile_maxItem = 300
let g:fuf_mrucmd_maxItem = 400
nnoremap <silent> <C-n>      :FufBuffer<CR>
nnoremap <silent> <C-p>      :FufFileWithCurrentBufferDir<CR>
nnoremap <silent> <C-f><C-p> :FufFileWithFullCwd<CR>
nnoremap <silent> <C-f>p     :FufFile<CR>
nnoremap <silent> <C-f><C-d> :FufDirWithCurrentBufferDir<CR>
nnoremap <silent> <C-f>d     :FufDirWithFullCwd<CR>
nnoremap <silent> <C-f>D     :FufDir<CR>
nnoremap <silent> <C-g>      :FufMruFile<CR>
nnoremap <silent> <C-k>      :FufMruCmd<CR>
nnoremap <silent> <C-b>      :FufBookmark<CR>
nnoremap <silent> <C-f><C-t> :FufTag<CR>
nnoremap <silent> <C-f>t     :FufTag!<CR>
noremap  <silent> g]         :FufTagWithCursorWord!<CR>
nnoremap <silent> <C-f><C-f> :FufTaggedFile<CR>
nnoremap <silent> <C-f><C-b> :FufAddBookmark<CR>
vnoremap <silent> <C-f><C-b> :FufAddBookmarkAsSelectedText<CR>
nnoremap <silent> <C-f><C-e> :FufEditInfo<CR>
nnoremap <silent> <C-f><C-r> :FufRenewCache<CR>

" }}}

" autocmd {{{

autocmd!

" Go back to the position the cursor was on the last time this file was edited
" This autocommand jumps to the last known position in a file just after
" opening it, if the '" mark is set:
" ref. eval.txt line3756
autocmd BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif

" For all text files set 'textwidth' to 78 characters.
autocmd FileType text setlocal textwidth=78

autocmd WinEnter * setlocal cursorline
autocmd WinLeave * setlocal nocursorline

autocmd FileType netrw nnoremap q :q<CR>

" http://paranoid.dip.jp/kaworu/2008-06-07-1.html
autocmd QuickfixCmdPost make,grep,grepadd,vimgrep copen

" }}}



" custom commands {{{

command! Cp932 edit ++enc=cp932
command! Eucjp edit ++enc=euc-jp
command! Iso2022jp edit ++enc=iso-2022-jp
command! Utf8 edit ++enc=utf-8

command! Jis Iso2022jp
command! Sjis Cp932

" }}}"



" other utils {{{

" http://d.hatena.ne.jp/tasukuchan/20070816/1187246177
highlight WhitespaceEOL ctermbg=red guibg=red
match WhitespaceEOL /\s\+$/
autocmd WinEnter * match WhitespaceEOL /\s\+$/

" http://d.hatena.ne.jp/ns9tks/20091105/1257420345
augroup VimrcNetrw
  autocmd!
  autocmd FileType netrw let g:bufnrLastNetrw = bufnr('%')
augroup END

function s:openNetrw()
  if exists('g:bufnrLastNetrw')
    execute g:bufnrLastNetrw . 'buffer'
  else
    edit .
  endif
endfunction

nnoremap <Leader>- :call <SID>openNetrw()<CR>

" }}}

" abbreviations {{{
" :h type-mistakes
ab teh the
ab fro for
" }}}

chdir ~

" Switch on syntax highlighting
syntax enable

